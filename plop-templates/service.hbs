import { Injectable } from '@nestjs/common'; 
import { InjectRepository } from '@nestjs/typeorm/dist/common';
import { Repository } from 'typeorm';
import {
  BadRequestException,
  RequestTimeoutException,
} from '@nestjs/common/exceptions';
import { {{properCase collectionName}}FilterInput } from './dto/filter_{{lowerCase     collectionName}}_input';
import { {{properCase collectionName}}Input } from './dto/create-{{lowerCase collectionName}}.input';
import { Update{{properCase collectionName}}Input } from './dto/update-{{lowerCase collectionName}}.input';
import { {{properCase collectionName}} } from './entities/{{lowerCase collectionName}}.entity';





@Injectable()
export class {{properCase collectionName}}Service {

    constructor(
    @InjectRepository({{properCase collectionName}})
    private {{properCase collectionName}}Repository: Repository<{{properCase collectionName}}>,
  ) {}

async create({{properCase collectionName}}Input: {{properCase collectionName}}Input): Promise<{{properCase collectionName}}> {
    try {
      const {{lowerCase collectionName}} = await this.{{properCase collectionName}}Repository.create({{properCase collectionName}}Input);
      return await this.{{properCase collectionName}}Repository.save({{lowerCase collectionName}});
    } catch (error) {
      throw new RequestTimeoutException();
    }
  }

async findAll(filteroptions: {{properCase collectionName}}FilterInput): Promise<{{properCase collectionName}}[]> {

    const defaultFilterValue = {
      orderBy: filteroptions.orderBy || 'id',
      sort: 'ASC',
      limit: filteroptions.page || 10,
      page: filteroptions.limit || 0,
    };
    return await this.{{properCase collectionName}}Repository
      .createQueryBuilder('{{lowerCase collectionName}}')
      .orderBy(defaultFilterValue.orderBy, 'ASC')
      .limit(defaultFilterValue.limit)
      .offset(defaultFilterValue.page * defaultFilterValue.limit)
      .getMany();
  }

async findOne(id: number): Promise<{{properCase collectionName}}> {
    const {{lowerCase collectionName}} = await this.{{properCase collectionName}}Repository.findOneBy({ id });
    if (!{{lowerCase collectionName}})
      throw new BadRequestException(`{{lowerCase collectionName}} with id ${id} not found`);
    return {{lowerCase collectionName}};
  }

async update(
    id: number,
    {{properCase collectionName}}Input: {{properCase collectionName}}Input,
  ): Promise<{{properCase collectionName}}> {
    const foundProduct = await this.{{properCase collectionName}}Repository.findOneBy({ id });

    if (!foundProduct)
      throw new BadRequestException(`{{properCase collectionName}} with id ${id} not found`);

    await this.{{properCase collectionName}}Repository.update(id, {{properCase collectionName}}Input);
    return await this.{{properCase collectionName}}Repository.findOneBy({ id });
  }

async remove(id: number): Promise<{{properCase collectionName}}> {
    try {
      const {{lowerCase collectionName}} = await this.{{properCase collectionName}}Repository.findOneBy({ id });
      if (!{{lowerCase collectionName}}) throw new BadRequestException('Product not found');
      const deleted = await this.{{properCase collectionName}}Repository.delete({ id });
      return {{lowerCase collectionName}};
    } catch (error) {
      throw new BadRequestException(`{{properCase collectionName}} with id ${id} not found`);
    }
  }

 }