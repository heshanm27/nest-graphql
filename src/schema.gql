# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BlogComponent {
  id: Int!
  htmlInputType: String!
  dataType: String!
  name: String!
  componentId: String
  label: String
}

type ComponentsValue {
  id: Int!
  data: JSON!
  collectionId: Int!
  collection: Collection!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Component {
  id: Int!
  htmlInputType: String!
  dataType: String!
  name: String!
  componentId: String
  label: String
  collectionId: Int!
  collection: Collection!
}

type Collection {
  id: Int!
  collectionName: String!
  components: [Component!]!
  componentsValue: [ComponentsValue!]!
}

type Blog {
  id: Int!
  blogdate: String!
  blogname: String!
}

type MovieComponent {
  id: Int!
  htmlInputType: String!
  dataType: String!
  name: String!
  componentId: String
  label: String
}

type Movie {
  id: Int!
  moviename: String!
}

type Query {
  findAllBlog(FilterOptions: BlogFilterInput): [Blog!]!
  findOneBlog(id: Int!): Blog!
  findAllBlogComponents: [BlogComponent!]!
  findAllMovie(FilterOptions: MovieFilterInput): [Movie!]!
  findOneMovie(id: Int!): Movie!
  findAllMovieComponents: [MovieComponent!]!
  findOneMovieComponent(id: Int!): MovieComponent!
  findAllComponents: [Component!]!
  findAllComponentsByCollectionId(collectionID: Int!): [Component!]!
  findOnecomponent(id: Int!): Component!
  FindAllCollection: [Collection!]!
  collectionFindOne(id: Int!): Collection!
  GetCollectionData(id: Int!): ComponentsValue!
}

input BlogFilterInput {
  page: Float = 1
  limit: Float = 10
  sort: String = "ASC"
  orderBy: String
}

input MovieFilterInput {
  page: Float = 1
  limit: Float = 10
  sort: String = "ASC"
  orderBy: String
}

type Mutation {
  createBlog(BlogInput: BlogInput!): Blog!
  updateBlog(updateBlogInput: UpdateBlogInput!): Blog!
  removeBlog(id: Int!): Blog!
  createBlogComponent(createBlogComponentInput: CreateBlogComponentInput!): BlogComponent!
  updateBlogComponent(updateBlogComponentInput: UpdateBlogComponentInput!): BlogComponent!
  removeBlogComponent(id: Int!): BlogComponent!
  createMovie(MovieInput: MovieInput!): Movie!
  updateMovie(updateMovieInput: UpdateMovieInput!): Movie!
  removeMovie(id: Int!): Movie!
  createMovieComponent(createMovieComponentInput: CreateMovieComponentInput!): MovieComponent!
  updateMovieComponent(updateMovieComponentInput: UpdateMovieComponentInput!): MovieComponent!
  removeMovieComponent(id: Int!, collectionName: String!): MovieComponent!
  createComponent(createComponentInput: CreateComponentInput!): Component!
  updateComponent(updateComponentInput: UpdateComponentInput!): Component!
  removeComponent(id: Int!): Component!
  createCollection(createCollectionInput: CreateCollectionInput!): Collection!
  updateCollection(updateCollectionInput: UpdateCollectionInput!): Collection!
  removeCollection(id: Int!): Collection!
  createComponentsValue(createComponentsValueInput: CreateComponentsValueInput!): ComponentsValue!
  updateComponentsValue(updateComponentsValueInput: UpdateComponentsValueInput!): ComponentsValue!
  removeComponentsValue(id: Int!): ComponentsValue!
}

input BlogInput {
  blogdate: String
  blogname: String
}

input UpdateBlogInput {
  id: Float!
  blogdate: String
  blogname: String
}

input CreateBlogComponentInput {
  htmlInputType: HTMLInputType! = TEXT
  dataType: DataType! = STRING
  name: String!
  collectionId: Int!
  componentId: String
  label: String
}

"""HTML Input Types """
enum HTMLInputType {
  DATE
  EMAIL
  NUMBER
  PASSWORD
  TEXT
  TIME
  FILE
  CHECKBOX
}

"""Data Types """
enum DataType {
  STRING
  NUMBER
  BOOLEAN
  DATE
}

input UpdateBlogComponentInput {
  id: Int!
  dataType: HTMLInputType
  htmlInputType: DataType
  name: String
  componentId: String
  label: String
}

input MovieInput {
  moviename: String
  id: Float
}

input UpdateMovieInput {
  id: Float!
  moviename: String
}

input CreateMovieComponentInput {
  htmlInputType: HTMLInputType! = TEXT
  dataType: DataType! = STRING
  name: String!
  collectionId: Int!
  componentId: String
  label: String
}

input UpdateMovieComponentInput {
  id: Int!
  dataType: HTMLInputType
  htmlInputType: DataType
  name: String
  componentId: String
  label: String
}

input CreateComponentInput {
  htmlInputType: HTMLInputType! = TEXT
  dataType: DataType! = STRING
  name: String!
  collectionId: Int!
  componentId: String
  label: String
}

input UpdateComponentInput {
  id: Int!
  collectionId: Int!
  dataType: HTMLInputType
  htmlInputType: HTMLInputType
  name: String
  componenId: String
  label: String
}

input CreateCollectionInput {
  collectionName: String!
}

input UpdateCollectionInput {
  id: Float!
  collectionName: String!
}

input CreateComponentsValueInput {
  data: JSON!
  collectionId: Int!
}

input UpdateComponentsValueInput {
  id: Int!
  data: JSON!
  collectionId: Int
}